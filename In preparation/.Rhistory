cohen.d(regularity_tmpFilter$WrittenFrequency,
regularity_tmpFilter$Auxiliary)
# zijnheb/zijn
regularity_tmpFilter <- filter(regularity, Auxiliary!='hebben')
cohen.d(regularity_tmpFilter$WrittenFrequency,
regularity_tmpFilter$Auxiliary)
## your code here
# hebben/zijnheb
regularity_tmpFilter <- filter(regularity, Auxiliary!='zijn')
cohen.d(regularity_tmpFilter$WrittenFrequency,
regularity_tmpFilter$Auxiliary)
# hebben/zijn
regularity_tmpFilter <- filter(regularity, Auxiliary!='zijnheb')
cohen.d(regularity_tmpFilter$WrittenFrequency,
regularity_tmpFilter$Auxiliary)
# zijnheb/zijn
regularity_tmpFilter <- filter(regularity, Auxiliary!='hebben')
cohen.d(regularity_tmpFilter$WrittenFrequency,
regularity_tmpFilter$Auxiliary)
## your code here
# hebben/zijnheb
regularity_tmpFilter <- filter(regularity, Auxiliary!='zijnheb')
cohen.d(regularity_tmpFilter$WrittenFrequency,
regularity_tmpFilter$Auxiliary)
# hebben/zijn
regularity_tmpFilter <- filter(regularity, Auxiliary!='zijnheb')
cohen.d(regularity_tmpFilter$WrittenFrequency,
regularity_tmpFilter$Auxiliary)
# zijnheb/zijn
regularity_tmpFilter <- filter(regularity, Auxiliary!='hebben')
cohen.d(regularity_tmpFilter$WrittenFrequency,
regularity_tmpFilter$Auxiliary)
## your code here
# hebben/zijnheb
regularity_tmpFilter <- filter(regularity, Auxiliary!='zijn')
regularity_tmpFilter %>%
mutate(Auxiliary = factor(Auxiliary, levels = c('hebben', 'zijnheb')))
cohen.d(regularity_tmpFilter$WrittenFrequency,
regularity_tmpFilter$Auxiliary)
# hebben/zijn
regularity_tmpFilter <- filter(regularity, Auxiliary!='zijnheb')
cohen.d(regularity_tmpFilter$WrittenFrequency,
regularity_tmpFilter$Auxiliary)
# zijnheb/zijn
regularity_tmpFilter <- filter(regularity, Auxiliary!='hebben')
cohen.d(regularity_tmpFilter$WrittenFrequency,
regularity_tmpFilter$Auxiliary)
# hebben/zijnheb
regularity_tmpFilter <- filter(regularity, Auxiliary!='zijn')
regularity_tmpFilter %>%
mutate(Auxiliary = factor(Auxiliary, levels = c('hebben', 'zijnheb')))
regularity_tmpFilter %>%
mutate(Auxiliary = factor(Auxiliary, levels = c('hebben', 'zijnheb')))
regularity_tmpFilter %>%
mutate(Auxiliary = factor(Auxiliary, levels = c('ebben', 'zijnheb')))
## your code here
# hebben/zijnheb
regularity_tmpFilter <- filter(regularity, Auxiliary!='zijn')
regularity_tmpFilter %>%
mutate(Auxiliary = factor(Auxiliary, levels = c('hebben', 'zijnheb')))
cohen.d(regularity_tmpFilter$WrittenFrequency,
regularity_tmpFilter$Auxiliary)
# hebben/zijn
regularity_tmpFilter <- filter(regularity, Auxiliary!='zijnheb')
cohen.d(regularity_tmpFilter$WrittenFrequency,
regularity_tmpFilter$Auxiliary)
# zijnheb/zijn
regularity_tmpFilter <- filter(regularity, Auxiliary!='hebben')
cohen.d(regularity_tmpFilter$WrittenFrequency,
regularity_tmpFilter$Auxiliary)
# hebben/zijnheb
regularity_tmpFilter <- filter(regularity,
Auxiliary %in% c('hebben', 'zijnheb'))
# hebben/zijn
regularity_tmpFilter %>%
mutate(Auxiliary = factor(Auxiliary, levels = c('hebben', 'zijn')))
cohen.d(regularity_tmpFilter$WrittenFrequency,
regularity_tmpFilter$Auxiliary)
regularity_tmpFilter <- regularity %>%
mutate(Auxiliary = factor(Auxiliary, levels = c('hebben', 'zijnheb')))
cohen.d(regularity_tmpFilter$WrittenFrequency,
regularity_tmpFilter$Auxiliary)
## your code here
# hebben/zijnheb
regularity_tmpFilter <- regularity %>%
mutate(Auxiliary = factor(Auxiliary, levels = c('hebben', 'zijnheb')))
cohen.d(regularity_tmpFilter$WrittenFrequency,
regularity_tmpFilter$Auxiliary)
# hebben/zijn
regularity_tmpFilter <- regularity %>%
mutate(Auxiliary = factor(Auxiliary, levels = c('hebben', 'zijn')))
cohen.d(regularity_tmpFilter$WrittenFrequency,
regularity_tmpFilter$Auxiliary)
# zijnheb/zijn
regularity_tmpFilter <- filter(regularity, Auxiliary!='hebben')
cohen.d(regularity_tmpFilter$WrittenFrequency,
regularity_tmpFilter$Auxiliary)
(3.683 * 119 + 4.0 * 9)/(119+9)
library(parallel)
parallel::detectCores()
# Load the required libraries
library(tidyverse)
library(dplyr)
library(stringr)
# Set working directory to source file
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# List all .csv and .txt files in the current folder
eventFiles <- list.files(pattern = ".csv|.txt")
# go one folder up
meanAmpFiles <- list.files(path = "../", pattern = ".csv|.txt")
# containing _event_
events_files <- eventFiles[str_detect(eventFiles, "_event_")]
# containing "ARflagList"
ARflagList <- eventFiles[str_detect(eventFiles, "ARflagList")]
# containing _urevent_
urevents_files <- eventFiles[str_detect(eventFiles, "_urevent_")]
# containing accImpPol2024Peter
behavioral_files <- eventFiles[str_detect(eventFiles, "accImpPol2024Peter")]
sub_list <- unique(str_sub(urevents_files, 1, 5))
# Loop through the subIDs
for (subID in sub_list) {
# Get the files matching the subID
event_file <- events_files[str_detect(events_files, subID)]
urevent_file <- urevents_files[str_detect(urevents_files, subID)]
arflag_file <- ARflagList[str_detect(ARflagList, subID)]
meanAmp_file <- meanAmpFiles[str_detect(meanAmpFiles, subID)]
behavioral_file <- behavioral_files[str_detect(behavioral_files, subID)]
# Read the files
event_df <- read.csv(event_file, header = TRUE)
urevent_df <- read.csv(urevent_file, header = TRUE)
arflag_df <- read.csv(arflag_file, header = TRUE) %>%
rename(ARflagStimCode = "code") %>%
dplyr::select(ARflagStimCode, codelabel, flag, bvmknum)
meanAmp_df <- read.csv(paste0('../', meanAmp_file), header = TRUE, sep = "\t")
behavioral_df <- read.csv(behavioral_file, header = TRUE) %>%
filter(!str_detect(task, "practice")) %>%
rename(subID_behavDF = "subID")
joined_df = urevent_df %>%
left_join(event_df, by = c("bvmknum" = "urevent")) %>%
rename(events_OG = "type.x",
events_kept = "type.y",
eventID  = "bvmknum") %>%
# keep only second to fourth characters
mutate(events_OG = str_sub(events_OG, 2, 4),
events_kept = str_sub(events_kept, 2, 4)) %>%
# filter for events_OF ending in '1' or '2'
filter(str_detect(events_OG, "1$|2$")) %>%
mutate(subID = subID,
stimCondERP_code = str_replace(events_OG, "1$|2$", "0")) %>%
left_join(arflag_df, by = c("eventID" = "bvmknum"))
#### Manual adjustments for specific subjects ####
# for sub02: add 2 filler rows at the top to joined_df (did not start recording EEG for the first trial)
# 71 (first row) 141 (second row) to events_OG and events_kept (other columns just put NA)
if (subID == "sub02") {
joined_df <- rbind(data.frame(eventID = 2, events_OG = 141,
events_kept = 141, subID = "sub02",
stimCondERP_code = "140",
ARflagStimCode = 141, codelabel = NA, flag = NA
), joined_df)
joined_df <- rbind(data.frame(eventID = 1, events_OG = 71, events_kept = 71, subID = "sub02", stimCondERP_code = "70",
ARflagStimCode = 71, codelabel = NA, flag = NA), joined_df)
}
# for sub29, remove first row of joined_df (unknown source of extra trial in original EEG data)
if (subID == "sub29") {
joined_df <- joined_df[-1,]
}
# join behavioral_df and joined_df by row number
trial_df <- cbind(joined_df, behavioral_df) %>%
# combined_flagRej column if flag is 1 or NA
mutate(combined_flagRej = if_else(flag == 1 | is.na(flag), 1, 0))
final_df <- trial_df %>%
left_join(meanAmp_df, by = c("eventID" = "bvmknum")) %>%
filter(combined_flagRej == 0) %>%
filter(response != "nr") %>%
dplyr::select(subID, events_OG, eventID, stimCondERP_code, trial_code, order, sex, trial_num, fileName, task, response, rts, electrode, N1, P2, LPC)
# get rejection summary by condition
rej_summary <- trial_df %>%
group_by(stimCondERP_code, task) %>%
summarise(n_rejected_EEG_AR = sum(combined_flagRej),
n_rejected_behav_nr = sum(response == "nr")) %>%
mutate(subID = subID)
# append dataframe
if (subID == sub_list[1]) {
final_df_all <- final_df
} else {
final_df_all <- rbind(final_df_all, final_df)
}
# save rejection summary
if (subID == sub_list[1]) {
rej_summary_all <- rej_summary
} else {
rej_summary_all <- rbind(rej_summary_all, rej_summary)
}
}
# Check final dataframe (stimCondERP_code == trial_code) (should be 0)
flag_nonMatch = final_df_all %>%
mutate(code_match = if_else(as.numeric(stimCondERP_code) == as.numeric(trial_code), "match", "no match")) %>%
filter(code_match == "no match")
# Wrangle a little bit for final output
final_df_all_output <- final_df_all %>%
# rename sex to subSex
rename(subSex = "sex",
presentOrd = "order",
Task = "task") %>%
# turn fileName into experimental factor columns
mutate(Accent = as.factor(str_sub(fileName, 1, 1)),
SpeakerSex = as.factor(str_sub(fileName, 2, 2)),
Imposition = as.factor(str_sub(fileName, 3, 3)),
Prosody = as.factor(str_sub(fileName, 4, 4)),
itemID = as.factor(str_sub(fileName, 6, 7))) %>%
# change column class
mutate_at(vars(subID, subSex, presentOrd, fileName, itemID, Task, electrode), as.factor) %>%
mutate_at(vars(eventID, response, rts), as.numeric) %>%
# recode factors
mutate(Accent = recode(Accent, "A" = "Foreign", "S" = "Native"),
Prosody = recode(Prosody, "P" = "Polite", "R" = "Rude"),
Imposition = recode(Imposition, "H" = "High", "L" = "Low"),
Task = recode(Task, "rateCompliance" = "Compliance", "rateFriendliness" = "Friendliness")) %>%
dplyr::select(eventID, subID, subSex, presentOrd, trial_num, fileName, itemID, Task, Prosody, Accent, Imposition, SpeakerSex, electrode, response, rts, N1, P2, LPC)
# check rows that contains NA in any column
flag_NA <- final_df_all_output %>%
filter_all(any_vars(is.na(.)))
# Remove rows with NA (one row in current dataset. too close to boundary (sub15 eventID 22))
final_df_all_output <- final_df_all_output %>% drop_na()
unique(final_df_all_output$electrode)
electrodes_MedialAnterior <- c("F1", "Fz", "F2", "FC1", "FC2")
electrodes_MedialAnterior <- c("Fz")
# summarize mean P2 in this ROI
final_df_all_output %>%
filter(electrode %in% electrodes_MedialAnterior) %>%
ggplot(aes(x = Accent, y = P2, color = Prosody)) +
stat_summary(fun.data = mean_cl_boot, geom = "pointrange", position = position_dodge(width = 0.5)) +
geom_point(position = position_jitterdodge(dodge.width = 0.5, jitter.width = 0.1)) +
facet_wrap(~subID)
# summarize mean P2 in this ROI
final_df_all_output %>%
filter(electrode %in% electrodes_MedialAnterior)
(7343+55)/260
# summarize mean P2 in this ROI
final_df_all_output %>%
filter(electrode %in% electrodes_MedialAnterior,
trial_num == "10")
30*250*63*16
30*250*63
final_df_all_output %>% filter(subID == "sub01")
final_df_all_output %>% filter(subID == "sub01", electrode == "Fz")
final_df_all_output %>%
filter(electrode %in% electrodes_MedialAnterior)
final_df_all_output %>%
filter(electrode %in% electrodes_MedialAnterior)
final_df_all_output %>%
filter(electrode %in% electrodes_MedialAnterior) %>%
final_df_all_output %>%
filter(electrode %in% electrodes_MedialAnterior) %>%
filter(subID == "sub01")
# summarize mean P2 in this ROI
final_df_all_output %>%
filter(electrode %in% electrodes_MedialAnterior) %>%
ggplot(aes(x = Accent, y = P2, color = Prosody)) +
stat_summary(fun.data = mean_cl_boot, geom = "pointrange", position = position_dodge(width = 0.5)) +
geom_point(position = position_jitterdodge(dodge.width = 0.5, jitter.width = 0.1)) +
facet_wrap(~subID)
63*30*260
final_df_all_output %>%
filter(electrode %in% electrodes_MedialAnterior) %>%
group_by(subID, Accent, Prosody) %>%
summarise(mean_P2 = mean(P2, na.rm = TRUE),
sd_P2 = sd(P2, na.rm = TRUE),
n = n())
final_df_all_output %>%
filter(electrode %in% electrodes_MedialAnterior) %>%
group_by(subID, Accent, Prosody)
final_df_all_output %>%
filter(electrode %in% electrodes_MedialAnterior,
subID == "sub01")
# Load the required libraries
library(tidyverse)
library(dplyr)
library(stringr)
# Set working directory to source file
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# List all .csv and .txt files in the current folder
eventFiles <- list.files(pattern = ".csv|.txt")
# go one folder up
meanAmpFiles <- list.files(path = "../", pattern = ".csv|.txt")
# containing _event_
events_files <- eventFiles[str_detect(eventFiles, "_event_")]
# containing "ARflagList"
ARflagList <- eventFiles[str_detect(eventFiles, "ARflagList")]
# containing _urevent_
urevents_files <- eventFiles[str_detect(eventFiles, "_urevent_")]
# containing accImpPol2024Peter
behavioral_files <- eventFiles[str_detect(eventFiles, "accImpPol2024Peter")]
sub_list <- unique(str_sub(urevents_files, 1, 5))
# Loop through the subIDs
for (subID in sub_list) {
# Get the files matching the subID
event_file <- events_files[str_detect(events_files, subID)]
urevent_file <- urevents_files[str_detect(urevents_files, subID)]
arflag_file <- ARflagList[str_detect(ARflagList, subID)]
meanAmp_file <- meanAmpFiles[str_detect(meanAmpFiles, subID)]
behavioral_file <- behavioral_files[str_detect(behavioral_files, subID)]
# Read the files
event_df <- read.csv(event_file, header = TRUE)
urevent_df <- read.csv(urevent_file, header = TRUE)
arflag_df <- read.csv(arflag_file, header = TRUE) %>%
rename(ARflagStimCode = "code") %>%
dplyr::select(ARflagStimCode, codelabel, flag, bvmknum)
meanAmp_df <- read.csv(paste0('../', meanAmp_file), header = TRUE, sep = "\t")
behavioral_df <- read.csv(behavioral_file, header = TRUE) %>%
filter(!str_detect(task, "practice")) %>%
rename(subID_behavDF = "subID")
joined_df = urevent_df %>%
left_join(event_df, by = c("bvmknum" = "urevent")) %>%
rename(events_OG = "type.x",
events_kept = "type.y",
eventID  = "bvmknum") %>%
# keep only second to fourth characters
mutate(events_OG = str_sub(events_OG, 2, 4),
events_kept = str_sub(events_kept, 2, 4)) %>%
# filter for events_OF ending in '1' or '2'
filter(str_detect(events_OG, "1$|2$")) %>%
mutate(subID = subID,
stimCondERP_code = str_replace(events_OG, "1$|2$", "0")) %>%
left_join(arflag_df, by = c("eventID" = "bvmknum"))
#### Manual adjustments for specific subjects ####
# for sub02: add 2 filler rows at the top to joined_df (did not start recording EEG for the first trial)
# 71 (first row) 141 (second row) to events_OG and events_kept (other columns just put NA)
if (subID == "sub02") {
joined_df <- rbind(data.frame(eventID = 2, events_OG = 141,
events_kept = 141, subID = "sub02",
stimCondERP_code = "140",
ARflagStimCode = 141, codelabel = NA, flag = NA
), joined_df)
joined_df <- rbind(data.frame(eventID = 1, events_OG = 71, events_kept = 71, subID = "sub02", stimCondERP_code = "70",
ARflagStimCode = 71, codelabel = NA, flag = NA), joined_df)
}
# for sub29, remove first row of joined_df (unknown source of extra trial in original EEG data)
if (subID == "sub29") {
joined_df <- joined_df[-1,]
}
# join behavioral_df and joined_df by row number
trial_df <- cbind(joined_df, behavioral_df) %>%
# combined_flagRej column if flag is 1 or NA
mutate(combined_flagRej = if_else(flag == 1 | is.na(flag), 1, 0))
final_df <- trial_df %>%
left_join(meanAmp_df, by = c("eventID" = "bvmknum")) %>%
filter(combined_flagRej == 0) %>%
filter(response != "nr") %>%
dplyr::select(subID, events_OG, eventID, stimCondERP_code, trial_code, order, sex, trial_num, fileName, task, response, rts, electrode, N1, P2, LPC)
# get rejection summary by condition
rej_summary <- trial_df %>%
group_by(stimCondERP_code, task) %>%
summarise(n_rejected_EEG_AR = sum(combined_flagRej),
n_rejected_behav_nr = sum(response == "nr")) %>%
mutate(subID = subID)
# append dataframe
if (subID == sub_list[1]) {
final_df_all <- final_df
} else {
final_df_all <- rbind(final_df_all, final_df)
}
# save rejection summary
if (subID == sub_list[1]) {
rej_summary_all <- rej_summary
} else {
rej_summary_all <- rbind(rej_summary_all, rej_summary)
}
}
# Check final dataframe (stimCondERP_code == trial_code) (should be 0)
flag_nonMatch = final_df_all %>%
mutate(code_match = if_else(as.numeric(stimCondERP_code) == as.numeric(trial_code), "match", "no match")) %>%
filter(code_match == "no match")
# Wrangle a little bit for final output
final_df_all_output <- final_df_all %>%
# rename sex to subSex
rename(subSex = "sex",
presentOrd = "order",
Task = "task") %>%
# turn fileName into experimental factor columns
mutate(Accent = as.factor(str_sub(fileName, 1, 1)),
SpeakerSex = as.factor(str_sub(fileName, 2, 2)),
Imposition = as.factor(str_sub(fileName, 3, 3)),
Prosody = as.factor(str_sub(fileName, 4, 4)),
itemID = as.factor(str_sub(fileName, 6, 7))) %>%
# change column class
mutate_at(vars(subID, subSex, presentOrd, fileName, itemID, Task, electrode), as.factor) %>%
mutate_at(vars(eventID, response, rts), as.numeric) %>%
# recode factors
mutate(Accent = recode(Accent, "A" = "Foreign", "S" = "Native"),
Prosody = recode(Prosody, "P" = "Polite", "R" = "Rude"),
Imposition = recode(Imposition, "H" = "High", "L" = "Low"),
Task = recode(Task, "rateCompliance" = "Compliance", "rateFriendliness" = "Friendliness")) %>%
dplyr::select(eventID, subID, subSex, presentOrd, trial_num, fileName, itemID, Task, Prosody, Accent, Imposition, SpeakerSex, electrode, response, rts, N1, P2, LPC)
# check rows that contains NA in any column
flag_NA <- final_df_all_output %>%
filter_all(any_vars(is.na(.)))
# Remove rows with NA (one row in current dataset. too close to boundary (sub15 eventID 22))
final_df_all_output <- final_df_all_output %>% drop_na()
# Save final dataframe
write.csv(final_df_all_output, "ERP_df_clean.csv", row.names = FALSE)
# number of trials per subject
n_trials <- final_df_all_output %>%
group_by(subID) %>%
summarise(n_trials = n()/63,
perc_trials = n_trials/278*100)
#### prelim data anlaysis ####
unique(final_df_all_output$electrode)
electrodes_MedialAnterior <- c("F1", "Fz", "F2", "FC1", "FC2")
electrodes_MedialAnterior <- c("Fz")
final_df_all_output %>%
filter(electrode %in% electrodes_MedialAnterior,
subID == "sub01") %>%
group_by(subID, Accent, Prosody) %>%
summarise(mean_P2 = mean(P2, na.rm = TRUE),
sd_P2 = sd(P2, na.rm = TRUE),
n = n())
# summarize mean P2 in this ROI
final_df_all_output %>%
filter(electrode %in% electrodes_MedialAnterior) %>%
ggplot(aes(x = Accent, y = P2, color = Prosody)) +
stat_summary(fun.data = mean_cl_boot, geom = "pointrange", position = position_dodge(width = 0.5)) +
geom_point(position = position_jitterdodge(dodge.width = 0.5, jitter.width = 0.1)) +
facet_wrap(~subID)
mod = lm(P2 ~ Accent * Prosody,
data = final_df_all_output%>%
filter(electrode %in% electrodes_select))
electrodes_MedialAnterior <- c("F1", "Fz", "F2", "FC1", "FC2")
electrodes_MedialAnterior <- c("Fz")
final_df_all_output %>%
filter(electrode %in% electrodes_MedialAnterior,
subID == "sub01") %>%
group_by(subID, Accent, Prosody) %>%
summarise(mean_P2 = mean(P2, na.rm = TRUE),
sd_P2 = sd(P2, na.rm = TRUE),
n = n())
mod = lm(P2 ~ Accent * Prosody,
data = final_df_all_output%>%
filter(electrode %in% electrodes_select))
mod = lm(P2 ~ Accent * Prosody,
data = final_df_all_output%>%
filter(electrode %in% "Fz"))
summary(mod)
library(emmeans)
pairs(emmeans(mod, ~ Accent * Prosody))
emmeans(mod, ~ Accent * Prosody)
pairs(emmeans(mod, ~ Accent * Prosody), simple = Accent)
pairs(emmeans(mod, ~ Accent * Prosody), simple = "Accent")
pairs(emmeans(mod, ~ Accent * Prosody), simple = "Prosody")
# summarize mean P2 in this ROI
final_df_all_output %>%
filter(electrode %in% electrodes_MedialAnterior) %>%
ggplot(aes(x = Accent, y = P2, color = Prosody)) +
stat_summary(fun.data = mean_cl_boot, geom = "pointrange", position = position_dodge(width = 0.5)) +
geom_point(position = position_jitterdodge(dodge.width = 0.5, jitter.width = 0.1)) +
facet_wrap(~subID)
# summarize mean P2 in this ROI
final_df_all_output %>%
filter(electrode %in% electrodes_MedialAnterior) %>%
ggplot(aes(x = Accent, y = P2, color = Prosody)) +
stat_summary(fun.data = mean_cl_boot, geom = "pointrange", position = position_dodge(width = 0.5)) +
geom_point(position = position_jitterdodge(dodge.width = 0.5, jitter.width = 0.1))
# summarize mean P2 in this ROI
final_df_all_output %>%
filter(electrode %in% electrodes_MedialAnterior) %>%
ggplot(aes(x = Accent, y = P2, color = Prosody)) +
stat_summary(fun.data = mean_cl_boot, geom = "pointrange", position = position_dodge(width = 0.5)) +
geom_point(position = position_jitterdodge(dodge.width = 0.5, jitter.width = 0.1), alpha = .1)
# summarize mean P2 in this ROI
final_df_all_output %>%
filter(electrode %in% electrodes_MedialAnterior) %>%
ggplot(aes(x = Accent, y = P2, color = Prosody)) +
stat_summary(fun.data = mean_cl_boot, geom = "pointrange", position = position_dodge(width = 0.5)) +
geom_point(position = position_jitterdodge(dodge.width = 0.5, jitter.width = 0.1), alpha = .01)
# summarize mean P2 in this ROI
final_df_all_output %>%
filter(electrode %in% electrodes_MedialAnterior) %>%
ggplot(aes(x = Accent, y = P2, color = Prosody)) +
stat_summary(fun.data = mean_cl_boot,
geom = "pointrange",
position = position_dodge(width = 0.5),
size = .1) +
geom_point(position = position_jitterdodge(dodge.width = 0.5, jitter.width = 0.1), alpha = .01)
# summarize mean P2 in this ROI
final_df_all_output %>%
filter(electrode %in% electrodes_MedialAnterior) %>%
ggplot(aes(x = Accent, y = P2, color = Prosody)) +
stat_summary(fun.data = mean_cl_boot,
geom = "pointrange",
position = position_dodge(width = 0.5),
size = .1)
ERP_df_clean <- read_csv("assets/dataframes/ERP_df_clean.csv")
setwd("C:/Github clones/PellLab/wiki/In preparation")
ERP_df_clean <- read_csv("assets/dataframes/ERP_df_clean.csv")
glimpse(ERP_df_clean)
ERP_df_clean <- read_csv("assets/dataframes/ERP_df_clean.csv")
glimpse(ERP_df_clean)
ERP_df_clean <- read_csv("assets/dataframes/Output/ERP_df_clean.csv")
glimpse(ERP_df_clean)
ERP_df_clean
ERP_df_clean <- read_csv("assets/dataframes/Output/ERP_df_clean.csv") %>%
mutate_if(is.character, as.factor)
glimpse(ERP_df_clean)
head(ERP_df_clean)
head(ERP_df_clean) %>%
kable() %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"), full_width = F)
library(kableExtra)
head(ERP_df_clean) %>%
kable() %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"), full_width = F)
gc()
